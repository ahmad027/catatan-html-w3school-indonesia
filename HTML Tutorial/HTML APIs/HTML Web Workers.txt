# HTML Web Workers API

    Pekerja web adalah JavaScript yang berjalan di latar belakang, tanpa memengaruhi performa halaman.

Apa itu Pekerja Web?

    Saat menjalankan skrip di halaman HTML, halaman menjadi tidak responsif hingga skrip selesai.

    Pekerja web adalah JavaScript yang berjalan di latar belakang, terlepas dari skrip lain, tanpa memengaruhi kinerja laman. Anda dapat terus melakukan apa pun yang Anda inginkan: mengklik, memilih sesuatu, dll., sementara pekerja web berjalan di latar belakang.


Contoh Pekerja Web HTML

    Contoh di bawah membuat pekerja web sederhana yang menghitung angka di latar belakang:

    Contoh

    <!DOCTYPE html>
    <html>
    <body>

        <p>Count numbers: <output id="result"></output></p>
        <button onclick="startWorker()">Start Worker</button> 
        <button onclick="stopWorker()">Stop Worker</button>

        <p><strong>Note:</strong> Internet Explorer 9 and earlier versions do not support Web Workers.</p>

        <script>
            var w;

            function startWorker() {
            if(typeof(Worker) !== "undefined") {
                if(typeof(w) == "undefined") {
                w = new Worker("demo_workers.js");
                }
                w.onmessage = function(event) {
                document.getElementById("result").innerHTML = event.data;
                };
            } else {
                document.getElementById("result").innerHTML = "Sorry, your browser does not support Web Workers...";
            }
            }

            function stopWorker() { 
            w.terminate();
            w = undefined;
            }
        </script>

    </body>
    </html>


Periksa Dukungan Pekerja Web

    Sebelum membuat pekerja web, periksa apakah browser pengguna mendukungnya:

        if (typeof(Worker) !== "undefined") {
        // Yes! Web worker support!
        // Some code.....
        } else {
        // Sorry! No Web Worker support..
        }


Buat File Pekerja Web

    Sekarang, mari buat pekerja web kita di JavaScript eksternal.

    Di sini, kami membuat skrip yang diperhitungkan. Skrip disimpan dalam file "demo_workers.js":

        var i = 0;

        function timedCount() {
        i = i + 1;
        postMessage(i);
        setTimeout("timedCount()",500);
        }

        timedCount();

    Bagian penting dari kode di atas adalah postMessage()metode - yang digunakan untuk mengirim pesan kembali ke halaman HTML.

    Catatan: Biasanya pekerja web tidak digunakan untuk skrip sederhana seperti itu, tetapi untuk tugas yang lebih intensif CPU.


Buat Objek Web Worker

    Sekarang kita memiliki file pekerja web, kita perlu memanggilnya dari halaman HTML.

    Baris berikut memeriksa apakah pekerja sudah ada, jika tidak - ini membuat objek pekerja web baru dan menjalankan kode di "demo_workers.js":

    if (typeof(w) == "undefined") {
    w = new Worker("demo_workers.js");
    }

    Kemudian kami dapat mengirim dan menerima pesan dari pekerja web.

    Tambahkan pendengar acara "onmessage" ke pekerja web.

    w.onmessage = function(event){
    document.getElementById("result").innerHTML = event.data;
    };

    Saat pekerja web memposting pesan, kode di dalam event listener dijalankan. Data dari pekerja web disimpan di event.data.


Hentikan Pekerja Web

    Saat objek pekerja web dibuat, ia akan terus mendengarkan pesan (bahkan setelah skrip eksternal selesai) hingga dihentikan.

    Untuk menghentikan pekerja web, dan sumber daya browser/komputer gratis, gunakan terminate()metode:

     w.terminate();

    Gunakan kembali Pekerja Web
    Jika Anda menyetel variabel pekerja ke tidak terdefinisi, setelah dihentikan, Anda dapat menggunakan kembali kode:

     w = undefined;


Kode Contoh Pekerja Web Lengkap

    Kami telah melihat kode Pekerja di file .js. Di bawah ini adalah kode untuk halaman HTML:

    Contoh

    <!DOCTYPE html>
    <html>
    <body>

        <p>Count numbers: <output id="result"></output></p>
        <button onclick="startWorker()">Start Worker</button> 
        <button onclick="stopWorker()">Stop Worker</button>

        <p><strong>Note:</strong> Internet Explorer 9 and earlier versions do not support Web Workers.</p>

        <script>
            var w;

            function startWorker() {
            if(typeof(Worker) !== "undefined") {
                if(typeof(w) == "undefined") {
                w = new Worker("demo_workers.js");
                }
                w.onmessage = function(event) {
                document.getElementById("result").innerHTML = event.data;
                };
            } else {
                document.getElementById("result").innerHTML = "Sorry, your browser does not support Web Workers...";
            }
            }

            function stopWorker() { 
            w.terminate();
            w = undefined;
        }
        </script>

    </body>
    </html>



